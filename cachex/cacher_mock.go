// Code generated by mockery v2.14.0. DO NOT EDIT.

package cachex

import mock "github.com/stretchr/testify/mock"

// CacherMock is an autogenerated mock type for the Cacher type
type CacherMock[K interface{}, V interface{}] struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *CacherMock[K, V]) Clear() {
	_m.Called()
}

// Delete provides a mock function with given fields: key
func (_m *CacherMock[K, V]) Delete(key K) {
	_m.Called(key)
}

// Get provides a mock function with given fields: key
func (_m *CacherMock[K, V]) Get(key K) (V, bool) {
	ret := _m.Called(key)

	var r0 V
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Len provides a mock function with given fields:
func (_m *CacherMock[K, V]) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *CacherMock[K, V]) Set(key K, value V) {
	_m.Called(key, value)
}

type mockConstructorTestingTNewCacherMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacherMock creates a new instance of CacherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacherMock[K interface{}, V interface{}](t mockConstructorTestingTNewCacherMock) *CacherMock[K, V] {
	mock := &CacherMock[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
